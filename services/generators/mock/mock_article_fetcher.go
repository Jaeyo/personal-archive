// Code generated by MockGen. DO NOT EDIT.
// Source: article_fetcher.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticleFetcher is a mock of ArticleFetcher interface.
type MockArticleFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockArticleFetcherMockRecorder
}

// MockArticleFetcherMockRecorder is the mock recorder for MockArticleFetcher.
type MockArticleFetcherMockRecorder struct {
	mock *MockArticleFetcher
}

// NewMockArticleFetcher creates a new mock instance.
func NewMockArticleFetcher(ctrl *gomock.Controller) *MockArticleFetcher {
	mock := &MockArticleFetcher{ctrl: ctrl}
	mock.recorder = &MockArticleFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleFetcher) EXPECT() *MockArticleFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockArticleFetcher) Fetch(url string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch.
func (mr *MockArticleFetcherMockRecorder) Fetch(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockArticleFetcher)(nil).Fetch), url)
}

// IsFetchable mocks base method.
func (m *MockArticleFetcher) IsFetchable(url string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFetchable", url)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFetchable indicates an expected call of IsFetchable.
func (mr *MockArticleFetcherMockRecorder) IsFetchable(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFetchable", reflect.TypeOf((*MockArticleFetcher)(nil).IsFetchable), url)
}
