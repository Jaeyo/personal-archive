// Code generated by MockGen. DO NOT EDIT.
// Source: article.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dtos "github.com/jaeyo/personal-archive/dtos"
	models "github.com/jaeyo/personal-archive/models"
)

// MockArticleDatastore is a mock of ArticleDatastore interface.
type MockArticleDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockArticleDatastoreMockRecorder
}

// MockArticleDatastoreMockRecorder is the mock recorder for MockArticleDatastore.
type MockArticleDatastoreMockRecorder struct {
	mock *MockArticleDatastore
}

// NewMockArticleDatastore creates a new mock instance.
func NewMockArticleDatastore(ctrl *gomock.Controller) *MockArticleDatastore {
	mock := &MockArticleDatastore{ctrl: ctrl}
	mock.recorder = &MockArticleDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleDatastore) EXPECT() *MockArticleDatastoreMockRecorder {
	return m.recorder
}

// DeleteArticleByIDs mocks base method.
func (m *MockArticleDatastore) DeleteArticleByIDs(ids []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleByIDs", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleByIDs indicates an expected call of DeleteArticleByIDs.
func (mr *MockArticleDatastoreMockRecorder) DeleteArticleByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleByIDs", reflect.TypeOf((*MockArticleDatastore)(nil).DeleteArticleByIDs), ids)
}

// ExistArticleByIDs mocks base method.
func (m *MockArticleDatastore) ExistArticleByIDs(ids []int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistArticleByIDs", ids)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistArticleByIDs indicates an expected call of ExistArticleByIDs.
func (mr *MockArticleDatastoreMockRecorder) ExistArticleByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistArticleByIDs", reflect.TypeOf((*MockArticleDatastore)(nil).ExistArticleByIDs), ids)
}

// ExistArticleByTitle mocks base method.
func (m *MockArticleDatastore) ExistArticleByTitle(title string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistArticleByTitle", title)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistArticleByTitle indicates an expected call of ExistArticleByTitle.
func (mr *MockArticleDatastoreMockRecorder) ExistArticleByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistArticleByTitle", reflect.TypeOf((*MockArticleDatastore)(nil).ExistArticleByTitle), title)
}

// FindArticleMetaByIDs mocks base method.
func (m *MockArticleDatastore) FindArticleMetaByIDs(ids []int64) (dtos.ArticleMetas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticleMetaByIDs", ids)
	ret0, _ := ret[0].(dtos.ArticleMetas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindArticleMetaByIDs indicates an expected call of FindArticleMetaByIDs.
func (mr *MockArticleDatastoreMockRecorder) FindArticleMetaByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticleMetaByIDs", reflect.TypeOf((*MockArticleDatastore)(nil).FindArticleMetaByIDs), ids)
}

// FindArticleMetaByIDsWithPage mocks base method.
func (m *MockArticleDatastore) FindArticleMetaByIDsWithPage(ids []int64, offset, limit int) (dtos.ArticleMetas, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticleMetaByIDsWithPage", ids, offset, limit)
	ret0, _ := ret[0].(dtos.ArticleMetas)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindArticleMetaByIDsWithPage indicates an expected call of FindArticleMetaByIDsWithPage.
func (mr *MockArticleDatastoreMockRecorder) FindArticleMetaByIDsWithPage(ids, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticleMetaByIDsWithPage", reflect.TypeOf((*MockArticleDatastore)(nil).FindArticleMetaByIDsWithPage), ids, offset, limit)
}

// FindArticleMetaByTagWithPage mocks base method.
func (m *MockArticleDatastore) FindArticleMetaByTagWithPage(tag string, offset, limit int) (dtos.ArticleMetas, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticleMetaByTagWithPage", tag, offset, limit)
	ret0, _ := ret[0].(dtos.ArticleMetas)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindArticleMetaByTagWithPage indicates an expected call of FindArticleMetaByTagWithPage.
func (mr *MockArticleDatastoreMockRecorder) FindArticleMetaByTagWithPage(tag, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticleMetaByTagWithPage", reflect.TypeOf((*MockArticleDatastore)(nil).FindArticleMetaByTagWithPage), tag, offset, limit)
}

// FindArticleMetaUntaggedWithPage mocks base method.
func (m *MockArticleDatastore) FindArticleMetaUntaggedWithPage(offset, limit int) (dtos.ArticleMetas, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticleMetaUntaggedWithPage", offset, limit)
	ret0, _ := ret[0].(dtos.ArticleMetas)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindArticleMetaUntaggedWithPage indicates an expected call of FindArticleMetaUntaggedWithPage.
func (mr *MockArticleDatastoreMockRecorder) FindArticleMetaUntaggedWithPage(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticleMetaUntaggedWithPage", reflect.TypeOf((*MockArticleDatastore)(nil).FindArticleMetaUntaggedWithPage), offset, limit)
}

// FindArticleMetaWithPage mocks base method.
func (m *MockArticleDatastore) FindArticleMetaWithPage(offset, limit int) (dtos.ArticleMetas, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticleMetaWithPage", offset, limit)
	ret0, _ := ret[0].(dtos.ArticleMetas)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindArticleMetaWithPage indicates an expected call of FindArticleMetaWithPage.
func (mr *MockArticleDatastoreMockRecorder) FindArticleMetaWithPage(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticleMetaWithPage", reflect.TypeOf((*MockArticleDatastore)(nil).FindArticleMetaWithPage), offset, limit)
}

// GetArticleAllCount mocks base method.
func (m *MockArticleDatastore) GetArticleAllCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleAllCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleAllCount indicates an expected call of GetArticleAllCount.
func (mr *MockArticleDatastoreMockRecorder) GetArticleAllCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleAllCount", reflect.TypeOf((*MockArticleDatastore)(nil).GetArticleAllCount))
}

// GetArticleByID mocks base method.
func (m *MockArticleDatastore) GetArticleByID(id int64) (*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleByID", id)
	ret0, _ := ret[0].(*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleByID indicates an expected call of GetArticleByID.
func (mr *MockArticleDatastoreMockRecorder) GetArticleByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleByID", reflect.TypeOf((*MockArticleDatastore)(nil).GetArticleByID), id)
}

// GetArticleContentByID mocks base method.
func (m *MockArticleDatastore) GetArticleContentByID(id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleContentByID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleContentByID indicates an expected call of GetArticleContentByID.
func (mr *MockArticleDatastoreMockRecorder) GetArticleContentByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleContentByID", reflect.TypeOf((*MockArticleDatastore)(nil).GetArticleContentByID), id)
}

// GetArticleMetaByID mocks base method.
func (m *MockArticleDatastore) GetArticleMetaByID(id int64) (*dtos.ArticleMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleMetaByID", id)
	ret0, _ := ret[0].(*dtos.ArticleMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleMetaByID indicates an expected call of GetArticleMetaByID.
func (mr *MockArticleDatastoreMockRecorder) GetArticleMetaByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleMetaByID", reflect.TypeOf((*MockArticleDatastore)(nil).GetArticleMetaByID), id)
}

// GetArticleUntaggedCount mocks base method.
func (m *MockArticleDatastore) GetArticleUntaggedCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleUntaggedCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleUntaggedCount indicates an expected call of GetArticleUntaggedCount.
func (mr *MockArticleDatastoreMockRecorder) GetArticleUntaggedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleUntaggedCount", reflect.TypeOf((*MockArticleDatastore)(nil).GetArticleUntaggedCount))
}

// SaveArticle mocks base method.
func (m *MockArticleDatastore) SaveArticle(article *models.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveArticle", article)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveArticle indicates an expected call of SaveArticle.
func (mr *MockArticleDatastoreMockRecorder) SaveArticle(article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveArticle", reflect.TypeOf((*MockArticleDatastore)(nil).SaveArticle), article)
}
